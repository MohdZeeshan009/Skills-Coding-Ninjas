G2S1

MCQ'S
1. O(n*log(n))
2. O(1)
3. car




""""CODES""""

<<<Power>>>

import java.util.*;

public class Solution {


	public static void main(String[] args) {
		/* Your class should be named Solution.
 			* Read input as specified in the question.
 			* Print output as specified in the question.
		*/

		// Write your code here

		Scanner scan = new Scanner(System.in);
        int a = scan.nextInt();
        int b = scan.nextInt();
        int[] arr = new int[b];
        for(int i = 0;i<b;i++){
            arr[i] = scan.nextInt();
        }
        System.out.print(superPow(a,arr));

	}

	static int DIV = 1337;
    
    static List<Integer> findLoop(int a){
        List<Integer> index = new ArrayList<>();
        boolean[] set = new boolean[DIV];
        int rem = a % DIV;
        while ( ! set[rem] ) {
            set[rem]=true;
            index.add(rem);
            rem = (rem*a) % DIV;
        }
        return index;
    }
    
    static int modBy(int[] b, int m){
        int rem = 0;
        for (int i=0; i < b.length; i++) {
            rem = (rem*10+b[i]) % m;
        }
        return rem;
    }

    public static int superPow(int a, int[] b) {
        if (a==0 || a==DIV || b==null || b.length == 0) return 0;
        if (a==1) return 1;
        if (a > DIV) return superPow( a % DIV, b);
        List<Integer> index = findLoop(a);
        int loopsize = index.size();
        int rem = modBy(b, loopsize);
        rem = rem==0? loopsize: rem;
        return index.get(rem-1);
    }

}


<<< All possible ways >>>


public class Solution {

    
    public static int allWays(int x, int n) {
        
        /* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */

        int result = checkRecursive(x,n,1,0);
        return result;

    }

    static int power(int num, int n)
    {
        if (n == 0)
            return 1;
        else if (n % 2 == 0)
            return power(num, n / 2) * power(num, n / 2);
        else
            return num * power(num, n / 2)
                * power(num, n / 2);
    }
 
    
static int checkRecursive(int x, int n, int curr_num,int curr_sum){
       
       
        int results = 0;
 
        
        int p = power(curr_num, n);
        while (p + curr_sum < x) {
            
            results += checkRecursive(x, n, curr_num + 1,
                                      p + curr_sum);
            curr_num++;
            p = power(curr_num, n);
        }
 
        
        if (p + curr_sum == x)
            results++;
 
        
        return results;
    }
}



<<< Binary Play >>>

public class Solution {
    static public int binarySequence(int N, int X) {
        // Write your code here

        if(N==1) return 0;
        if(X%2==0){
            if (binarySequence(N-1,X/2)==0) return 1;
            else return 0;
        }
        else{
            if(binarySequence(N-1,(X+1)/2)==0) return 0;
            else return 1;
        }
    }
}



<<< Quadruplet Sum >>> 

import java.util.*;
public class Solution
{
    static public List<List<Integer>> quadruplets(int[] nums, int x) 
    {
        // Write your code here
         Arrays.sort(nums);
         return kSum(nums, x, 0, 4);
    }

    public static List<List<Integer>> kSum(int[] nums, long target, int start, int k) {
        List<List<Integer>> res = new ArrayList<>();
        if (start == nums.length) {
            return res;
        }
        long average_value = target / k;
        if  (nums[start] > average_value || average_value > nums[nums.length - 1]) {
            return res;
        }
        
        if (k == 2) {
            return twoSum(nums, target, start);
        }
    
        for (int i = start; i < nums.length; ++i) {
            if (i == start || nums[i - 1] != nums[i]) {
                for (List<Integer> subset : kSum(nums, target - nums[i], i + 1, k - 1)) {
                    res.add(new ArrayList<>(Arrays.asList(nums[i])));
                    res.get(res.size() - 1).addAll(subset);
                }
            }
        }
    
        return res;
    }
	
    public static List<List<Integer>> twoSum(int[] nums, long target, int start) {
        List<List<Integer>> res = new ArrayList<>();
        int lo = start, hi = nums.length - 1;
    
        while (lo < hi) {
            int currSum = nums[lo] + nums[hi];
            if (currSum < target || (lo > start && nums[lo] == nums[lo - 1])) {
                ++lo;
            } else if (currSum > target || (hi < nums.length - 1 && nums[hi] == nums[hi + 1])) {
                --hi;
            } else {
                res.add(Arrays.asList(nums[lo++], nums[hi--]));
            }
        }
                                                          
        return res;
    }



}




