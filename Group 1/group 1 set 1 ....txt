------------1111111111----------------------
import java.util.Scanner;
public class Solution {

 public static String addBinary(String a, String b) {
       int n = a.length(), m = b.length();
        if (n < m) return addBinary(b, a);
        int L = Math.max(n, m);
        StringBuilder sb = new StringBuilder();
        int carry = 0, j = m - 1;
        
        for (int i = L - 1; i > -1; --i) {
            if (a.charAt(i) == '1') ++carry;
            if (j > -1 && b.charAt(j--) == '1') ++carry;
            
            if (carry % 2 == 1) sb.append('1');
            else sb.append('0');
            
            carry /= 2;
        }
        
        if (carry == 1) sb.append('1');
        sb.reverse();
        
        return sb.toString();
    }

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int test=sc.nextInt();
		while(test>0){
			String first=sc.next();
			String second=sc.next();	
			System.out.println(addBinary(first, second));
			test--;
		}

	}

}

-------------------222222222---------------------
Reset Matrix

import java.util.Scanner;
public class solution {
	public static void makeRowsCols0(int [][]input) {
	
		int r = input.length, c = input[0].length;
		boolean[][] zeros = new boolean[r][c];
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				if (input[i][j] == 0) zeros[i][j] = true;
			}
		}
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				if (zeros[i][j] == true) {
					fillRowWithZeros(i, input);
					fillColumnWithZeros(j, input);
				}
			}
		}
		// for(int i=0; i<input.length;i++) {
		// 	for(int j=0; j<input[0].length; j++) {
		// 		System.out.print(input[i][j]+" ");
		// 	}
		// 	System.out.println();
		// }
	}

	private static void fillRowWithZeros(int row, int[][] input) {
		for (int i = 0; i < input[row].length; i++) {
			input[row][i] = 0;
		}
	}

	private static void fillColumnWithZeros(int col, int[][] m) {
		for (int i = 0; i < m.length; i++) {
			m[i][col] = 0;
		}
		
	}
	public static void main(String[] args) {
	
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int m=sc.nextInt();
		int input[][]= new int [n][m];
		int row,col;
		for(int i=0; i<=n;i++) {
			for(int j=0; i<=m;j++) {
				input[i][j]=sc.nextInt();
			}
		}
		makeRowsCols0(input);
	}
}

-------------3333333--------------------------

Prymid number pattern

import java.util.Scanner;
public class solution {
	public static void makeRowsCols0(int [][]input) {
	
		int r = input.length, c = input[0].length;
		boolean[][] zeros = new boolean[r][c];
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				if (input[i][j] == 0) zeros[i][j] = true;
			}
		}
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				if (zeros[i][j] == true) {
					fillRowWithZeros(i, input);
					fillColumnWithZeros(j, input);
				}
			}
		}
		// for(int i=0; i<input.length;i++) {
		// 	for(int j=0; j<input[0].length; j++) {
		// 		System.out.print(input[i][j]+" ");
		// 	}
		// 	System.out.println();
		// }
	}

	private static void fillRowWithZeros(int row, int[][] input) {
		for (int i = 0; i < input[row].length; i++) {
			input[row][i] = 0;
		}
	}

	private static void fillColumnWithZeros(int col, int[][] m) {
		for (int i = 0; i < m.length; i++) {
			m[i][col] = 0;
		}
		
	}
	public static void main(String[] args) {
	
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int m=sc.nextInt();
		int input[][]= new int [n][m];
		int row,col;
		for(int i=0; i<=n;i++) {
			for(int j=0; i<=m;j++) {
				input[i][j]=sc.nextInt();
			}
		}
		makeRowsCols0(input);
	}
}

---------------444444-------------------------

Amazing String

public class Solution {
	public static String amazingStrings(String first, String second,String third) {
		if((first.length() + second.length()) == third.length()){
		       return "YES";
		   }
		   else{
		       return "NO";
		   }
		// Write your code here.
	}
}